// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.8.22'
    ext.huawei_version = '1.9.1.300'
    ext.gradle_version = '8.1.1'
    ext.gradle_pitest_plugin_version = '0.2.2'
    ext.dokka_version = '2.0.0'
    repositories {
        google()
        mavenCentral()
        // huawei maven
        maven { url 'https://developer.huawei.com/repo/' }
        maven { url = uri("https://plugins.gradle.org/m2/") }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "pl.droidsonroids.gradle:gradle-pitest-plugin:$gradle_pitest_plugin_version"
        classpath "com.huawei.agconnect:agcp:$huawei_version"
        classpath libs.google.services
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        // huawei maven
        maven { url 'https://developer.huawei.com/repo/' }
    }
}

subprojects {
    ext.global_minSdkVersion = 23
    ext.global_compileSdkVersion = 35
    ext.global_targetVersion = 35
    ext.global_versionName = "6.7.42"
    ext.global_targetGroupId = "com.pushwoosh"

    ext.googlePlayService = "18.4.0"
    ext.googleLocationServices = "21.0.1"
    ext.firebase = "24.0.0"
    ext.support = "1.0.0"
    ext.appcompat = "1.6.1"
    ext.legacy_support_v4 = "1.0.0"
    ext.glide = "4.7.1"
    ext.constraint = "1.1.3"
    ext.material = "1.6.0"
    ext.workManager = "2.8.1"
    ext.swipe_refresh_layout = "1.1.0"
    ext.huawei = "6.1.0.300"
    ext.mockito = "5.8.0"
}

// ============================================
// Dokka Documentation Configuration
// ============================================

apply plugin: 'org.jetbrains.dokka'

// Dokka output directory (REQUIRED via -PdokkaOutputDir=... only when running dokka tasks)
// Check if any dokka task is being executed
def isDokkaTask = gradle.startParameter.taskNames.any { it.toLowerCase().contains('dokka') }

// Validate and set dokkaOutputDir only when running dokka tasks
if (isDokkaTask) {
    if (!project.hasProperty('dokkaOutputDir')) {
        throw new GradleException("❌ dokkaOutputDir property is required. Pass it via -PdokkaOutputDir=...")
    }
    ext.dokkaOutputDir = project.property('dokkaOutputDir')
}

// Apply Dokka plugin to all SDK modules
subprojects {
    // Only apply to SDK modules, exclude demoapp and stubs
    if (project.name != 'demoapp' && !project.name.contains('stub')) {
        apply plugin: 'org.jetbrains.dokka'

        // Store visibility enum reference for use in applied scripts (Dokka 2.0 VisibilityModifier)
        ext.dokkaVisibilityPublic = org.jetbrains.dokka.gradle.engine.parameters.VisibilityModifier.Public
        ext.dokkaVisibilityProtected = org.jetbrains.dokka.gradle.engine.parameters.VisibilityModifier.Protected
    }
}

// ============================================
// Multi-Module HTML Documentation (Dokka 2.0)
// ============================================

// Only configure Dokka aggregation if actually running dokka tasks
if (isDokkaTask) {
    logger.lifecycle("🔧 Configuring root Dokka aggregation")

    dokka {
        moduleName.set("Pushwoosh Android SDK")

        // Aggregate documentation from subprojects
        dokkaPublications.html {
            outputDirectory.set(file("${rootProject.ext.dokkaOutputDir}"))
        }
    }

    // Add dokka dependencies for multi-module aggregation
    dependencies {
        subprojects.each { subproject ->
            if (subproject.name != 'demoapp' && !subproject.name.contains('stub')) {
                dokka(project(":${subproject.name}"))
            }
        }
    }
} else {
    logger.debug("Skipping root Dokka configuration - not running dokka tasks")
}
