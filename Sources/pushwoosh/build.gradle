buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.adarshr:gradle-test-logger-plugin:4.0.0'
    }
}

ext{
    targetArtefactIdDev = "pushwoosh-dev"
    targetArtefactId = "pushwoosh"
    targetName = "Pushwoosh"
    targetDescription = "Pushwoosh push notifications SDK for Android"
}

apply plugin: 'com.android.library'
apply from: '../scripts/quality/quality.gradle'
apply plugin: 'pl.droidsonroids.pitest'
apply plugin: 'com.adarshr.test-logger'
apply from: '../scripts/buildSdk/publish.gradle'
apply from: '../scripts/prepareAar/build.gradle'

android {
    compileSdkVersion global_compileSdkVersion

    namespace "com.pushwoosh"
    testNamespace "com.pushwoosh.test"

    defaultConfig {
        versionName global_versionName
        minSdkVersion global_minSdkVersion
        buildConfigField("String","VERSION_NAME","\"${defaultConfig.versionName}\"")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguard-common.txt',
                    'proguard/public.txt', 'proguard/protected.txt'
        }
        debug {
            minifyEnabled false
        }
        coverage {
            testCoverageEnabled true
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests {
            includeAndroidResources = true
        }
    }

    tasks.withType(Test).configureEach {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

dependencies {

    implementation "androidx.work:work-runtime:${workManager}"
    implementation "androidx.legacy:legacy-support-v4:${legacy_support_v4}"

    androidTestImplementation "androidx.annotation:annotation:${support}"
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation "org.mockito:mockito-core:${mockito}"

    testImplementation "androidx.work:work-testing:${workManager}"
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:${mockito}"
    testImplementation files('testLibs/json.jar')

    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'org.hamcrest:hamcrest-integration:1.3'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'

    testImplementation 'org.robolectric:robolectric:4.13'
    testImplementation 'org.robolectric:shadows-httpclient:4.13'

    testImplementation 'com.squareup.okhttp3:mockwebserver:3.6.0'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
}

pitest {
    targetClasses = ['com.pushwoosh.*']
    threads = 5
    outputFormats = ['HTML']
    timeoutConstInMillis = 2000
    // Necessary to allow Robolectric to finish. See http://pitest.org/faq/#im-seeing-a-lot-of-timeouts-whats-going-on
}